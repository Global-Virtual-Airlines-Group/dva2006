<?xml version="1.0" encoding="UTF-8"?>
<project default="deploy">
	<!-- Buld the JavaDoc -->
    <target name="javadoc">
		<mkdir dir="${java.io.tmpdir}/javadoc" />
        <javadoc destdir="${java.io.tmpdir}/javadoc" access="package" source="1.5" use="false"
    		useexternalfile="true" notree="false" nonavbar="false" noindex="false" splitindex="true" 
        	author="true" version="true" nodeprecatedlist="false" nodeprecated="false">
        	<fileset dir=".">
        		<include name="src/java/**/*.java" />
        		<include name="../DVA ACARS/src/java/**/*.java" />
        	</fileset>
            <link href="http://java.sun.com/j2se/1.5.0/docs/api" />
        	<link href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api" />
        	<link href="http://www.jdom.org/docs/apidocs" />
        	<link href="http://logging.apache.org/log4j/docs/api" />
        	<link href="http://www.servlets.com/cos/javadoc" />
        	
           	<doctitle><![CDATA[<h2>Golgotha API Documentation</h2>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2004, 2005, 2006, 2007 Global Virtual Airlines Group. All Rights Reserved.</i>]]></bottom>
        </javadoc>
    	
   		<!-- Load the SCP server properties -->
    	<property name="path.javadoc" value="/usr/local/www/deltava.org/www/javadoc" />
   		<loadproperties srcFile="data/build_doc.properties">
   			<filterchain>
	   			<prefixlines prefix="javadoc." />
   			</filterchain>
   		</loadproperties>
    	
    	<!-- Clean out the JavaDoc -->
    	<sshexec password="${javadoc.ssh.pwd}" username="${javadoc.ssh.user}" trust="yes"
    		host="${javadoc.ssh.server}" timeout="7500" failonerror="no"
    		command="rm -Rd ${javadoc.ssh.path.javadoc}/*" />
    	
    	<!-- Clean out the JavaDoc -->
    	<sshexec password="${javadoc.ssh.pwd}" username="${javadoc.ssh.user}" trust="yes"
    		host="${javadoc.ssh.server}" timeout="7500" failonerror="no"
    		command="rm -Rd ${javadoc.ssh.path.javadoc}/*" />
    	
    	<!-- Upload the JavaDoc -->
    	<scp todir="${javadoc.ssh.user}@${javadoc.ssh.server}:${javadoc.ssh.path.javadoc}" trust="yes"
    		verbose="yes" password="${javadoc.ssh.pwd}">
    		<fileset dir="${java.io.tmpdir}/javadoc" />
    	</scp>
    	
    	<!-- Clean out the temp folder -->
    	<delete dir="${java.io.tmpdir}/javadoc" />
    	<delete file="${java.io.tmpdir}/javadoc.tar.gz" />
    </target>
	
	<target name="junit">
		<!-- Execute the JUnit tests -->
		<mkdir dir="${java.io.tmpdir}/junit" />
		<junit fork="on" forkmode="perBatch" dir="${basedir}" printsummary="yes" showoutput="yes">
		    <classpath>
				<pathelement path="${classpath}" />
		    	<pathelement location="./bin" />
		    	<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
		    </classpath>
			
			<formatter type="xml" />
			<batchtest todir="${java.io.tmpdir}/junit">
				<fileset dir="src/test">
					<include name="**/Test*.java" />
				</fileset>
			</batchtest>
		</junit>
		
		<!-- Generate the JUnit report -->
		<mkdir dir="${java.io.tmpdir}/junit_report" />		
		<junitreport todir="${java.io.tmpdir}/junit">
			<fileset dir="${java.io.tmpdir}/junit">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${java.io.tmpdir}/junit_report" />
		</junitreport>
		
		<!-- Load the FTP server properties -->
		<property name="path.junit" value="/usr/local/www/deltava.org/www/junit" />
		<property file="data/build_doc.properties" prefix="junit" />
		
    	<!-- Upload the JUnit report -->
    	<ftp password="${junit.ftp.pwd}" server="${junit.ftp.server}" userid="${junit.ftp.user}"
    	 remotedir="${path.junit}" action="send" verbose="yes">
    		<fileset dir="${java.io.tmpdir}/junit_report" />
    	</ftp>

		<!-- Clean out the temporary paths -->
		<delete dir="${java.io.tmpdir}/junit" />
		<delete dir="${java.io.tmpdir}/junit_report" />
	</target>

	<!-- Compile the Java classes -->
	<target name="compile">
		<mkdir dir="${java.io.tmpdir}/build/classes" />
		<javac srcdir="src/java" optimize="on" destdir="${java.io.tmpdir}/build/classes"
		 debug="true" debuglevel="lines,vars,source" source="1.6" target="1.6" compiler="modern">
			<compilerarg value="-Xlint:unchecked,deprecation,finally" />
	    	<classpath>
				<pathelement path="${classpath}" />
		    	<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
	    	</classpath>
		</javac>
		
		<!-- Compress the Java classes into a single JAR file -->
		<jar basedir="${java.io.tmpdir}/build/classes" compress="true" index="true"
		 destfile="${java.io.tmpdir}/build/golgotha.jar" />
	</target>

	<!-- Precompile the JSP pages -->
	<target name="jspc" depends="compile">
		<property name="jspc.webXMLInc" value="${java.io.tmpdir}/src/jsp/include.xml" />
		<taskdef classname="org.apache.jasper.JspC" name="jasper2">
			<classpath id="jspc.classpath"> 
				<pathelement path="${classpath}" />
				<fileset dir="${java.io.tmpdir}/build" includes="*.jar" />
				<fileset dir="./lib" includes="**/*.jar" /> 
			</classpath> 
		</taskdef>
		
		<!-- Delete the old web.xml files -->
		<delete file="${java.io.tmpdir}/build/web.xml" />
		<delete file="${basedir}/WEB-INF/web.xml" />
		
		<!-- Precompile the files -->
		<mkdir dir="${java.io.tmpdir}/src/jsp" />
		<copy file="WEB-INF/web_core.xml" tofile="${basedir}/WEB-INF/web.xml" />
	    <jasper2 package="org.deltava" uriroot="${basedir}" verbose="0" poolingEnabled="false"
	    	xpoweredBy="true" validateXml="false" webXmlFragment="${jspc.webXMLInc}"
	    	compilerTargetVM="1.5" compilerSourceVM="1.5" trimSpaces="false"
			outputDir="${java.io.tmpdir}/src/jsp" />
		<delete file="${basedir}/WEB-INF/web.xml" />		

		<!-- Compile the files -->
		<mkdir dir="${java.io.tmpdir}/build/jsp" />
		<javac srcdir="${java.io.tmpdir}/src/jsp" destdir="${java.io.tmpdir}/build/jsp"
			debug="on" debuglevel="source" optimize="on" target="1.6" source="1.6">
			<compilerarg value="-Xlint:deprecation,finally" />
			<classpath refid="jspc.classpath" />
			<include name="org/deltava/jsp/**/*.java" />
		</javac>
		
		<!-- Compress the Java classes into a single JAR file -->
		<jar basedir="${java.io.tmpdir}/build/jsp" compress="true" index="true"
		 	destfile="${java.io.tmpdir}/build/golgotha_jsp.jar" />
		 		 
		<!-- Force all JSPs to load on startup -->
		<!-- <replace file="${jspc.webXMLInc}" token="&lt;/servlet-class&gt;">
			<replacevalue><![CDATA[</servlet-class>
        <load-on-startup>2</load-on-startup>]]></replacevalue>
		</replace> -->
			
		<!-- Merge the precompile definitions into web.xml -->
		<loadfile property="webXmlFragment" srcFile="${jspc.webXMLInc}" />
		<copy file="WEB-INF/web_core.xml" tofile="${java.io.tmpdir}/build/web.xml" />
		<replace file="${java.io.tmpdir}/build/web.xml" token="&lt;!-- [INSERT FRAGMENT HERE] --&gt;" value="${webXmlFragment}" /> 
	</target>
	
	<target name="deploy" depends="compile,jspc">
		<loadproperties srcFile="data/build_deploy.properties" />

		<!-- Upload the web configuration -->
		<scp todir="${webapp.dev.user}@${webapp.dev.server}:${webapp.dev.path}/WEB-INF"
			verbose="yes" trust="yes" password="${webapp.dev.pwd}">
			<fileset file="${java.io.tmpdir}/build/web.xml">
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/cfg.cache.dev.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload the common JAR files to the app server -->
		<scp todir="${webapp.dev.user}@${webapp.dev.server}:${webapp.dev.path.common}"
			verbose="yes" trust="yes" password="${webapp.dev.pwd}">
			<fileset dir="lib/deploy" includes="*.jar">
				<exclude name="log4j*.jar" />
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/jar.cache.dev.txt" />
				</modified>
			</fileset>
		</scp>

		<!-- Upload the JAR files to the app server -->
		<scp todir="${webapp.dev.user}@${webapp.dev.server}:${webapp.dev.path}/WEB-INF/lib"
			verbose="yes" trust="yes" password="${webapp.dev.pwd}">
	 		<fileset dir="${java.io.tmpdir}/build">
				<include name="golgotha.jar" />
				<include name="golgotha_jsp.jar" />
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/jar.cache.dev.txt" />
				</modified>
			</fileset>
			<fileset dir="lib/deploy">
				<include name="log4j*.jar" />
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/jar.cache.dev.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload the config file to the app server -->
		<scp todir="${webapp.dev.user}@${webapp.dev.server}:${webapp.dev.path}/WEB-INF/classes/etc"
			verbose="yes" trust="yes" password="${webapp.dev.pwd}">
			<fileset dir="etc" includes="*.*">
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/cfg.cache.dev.txt" />
				</modified>
			</fileset>
		</scp>

		<!-- Upload static content to the HTTP server -->
		<scp todir="${http.dev.user}@${http.dev.server}:${http.dev.path}" verbose="yes" trust="yes" password="${http.dev.pwd}">
			<fileset dir="static">
				<modified seldirs="true" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/static.cache.dev.txt" />
				</modified>
			</fileset>
		</scp>
	</target>
	
	<!-- Clean out compiled data -->
	<target name="clean">
		<delete dir="${java.io.tmpdir}/build" />
		<delete dir="${java.io.tmpdir}/src/jsp" />
		<delete file="${java.io.tmpdir}/build/web.xml" />
	</target>
	
	<!-- Upload scripts to the app server -->
	<target name="put_scripts">
		<loadproperties srcFile="data/build_deploy.properties" />

		<!-- Upload the scripts -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:/usr/local/sbin/www" verbose="yes"
			trust="yes" password="${webapp.ssh.pwd}">
			<fileset dir="scripts/${webapp.ssh.os}">
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/static.cache.txt" />
				</modified>
			</fileset>
		</scp>
	</target>
	
	<!-- Production Deployment via SSH -->
	<target name="prod_deploy" depends="compile,jspc,put_scripts">
		<loadproperties srcFile="data/build_deploy.properties" />

		<!-- Upload the web configuration -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path}"
				verbose="yes" trust="yes" password="${webapp.ssh.pwd}">
			<fileset file="${java.io.tmpdir}/build/web.xml">
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/cfg.cache.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload the common JAR files to the app server -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path.common}"
			verbose="yes" trust="yes" password="${webapp.ssh.pwd}">
			<fileset dir="lib/deploy" includes="*.jar">
				<exclude name="log4j*.jar" />
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/jar.cache.txt" />
				</modified>
			</fileset>
		</scp>

		<!-- Upload the JAR files to the app server -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path}/lib"
			verbose="yes" trust="yes" password="${webapp.ssh.pwd}">
			<fileset dir="${java.io.tmpdir}/build">
				<include name="golgotha.jar" />
				<include name="golgotha_jsp.jar" />
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/jar.cache.txt" />
				</modified>
			</fileset>
			<fileset dir="lib/deploy">
				<include name="log4j*.jar" />
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/jar.cache.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload the config file to the app server -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path}/classes/etc"
			verbose="yes" trust="yes" password="${webapp.ssh.pwd}">
			<fileset dir="etc">
				<include name="commands.xml" />
				<include name="services.xml" />
				<include name="profanity.txt" />
				<include name="jcs.notams.cer" />
				<include name="iata_aircraft.properties" />
				<include name="codeshares.txt" />
				<modified seldirs="false" algorithm="digest">
						<param name="algorithm.algorithm" value="MD5" />
						<param name="cache.cachefile" value="../.local_data/cfg.cache.txt" />
				</modified>
			</fileset>
			<fileset dir="etc/prod">
				<modified seldirs="false" algorithm="digest">
						<param name="algorithm.algorithm" value="MD5" />
						<param name="cache.cachefile" value="../.local_data/cfg.cache.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload static content to the HTTP server -->
		<scp todir="${http.ssh.user}@${http.ssh.server}:${http.ssh.path}"
			verbose="yes" trust="yes" password="${http.ssh.pwd}">
			<fileset dir="static">
				<modified seldirs="true" algorithm="digest">
						<param name="algorithm.algorithm" value="MD5" />
						<param name="cache.cachefile" value="../.local_data/static.cache.txt" />
				</modified>
			</fileset>
		</scp>
	</target>

	<!-- Package source code -->
	<target name="put_source">
		<tar destfile="${java.io.tmpdir}/src/golgotha.tar" longfile="fail">
			<tarfileset uid="500" group="gva" dir="${basedir}">
				<include name="src/java/**/*.java" />
				<include name="src/test/**/*.java" />
				<include name="lib/**" />
				<include name="jsp/**" />
				<include name="sql/**" />
				<include name="static/**" />
				<include name="WEB-INF/**" />
				<include name="*" />
			</tarfileset>
				
			<!-- Data files -->
			<tarfileset uid="500" group="gva" dir="${basedir}/data" prefix="data">
				<exclude name="build_deploy.properties" />
				<exclude name="build_doc.properties" />
				<exclude name="jdbc.properties" />
			</tarfileset>
				
			<!-- Sample data files with credentials -->
			<tarfileset uid="500" group="gva" dir="${basedir}/etc/sample" prefix="data">
				<include name="build_deploy.properties" />
				<include name="build_doc.properties" />
				<include name="jdbc.properties" />
			</tarfileset>
				
			<!-- Configuration files -->
			<tarfileset uid="500" group="gva" dir="${basedir}/etc" prefix="etc/prod">
				<include name="commands.xml" />
				<include name="services.xml" />
				<include name="tasks.xml" />
				<include name="profanity.txt" />
				<include name="codeshares.txt" />
				<include name="jcs.notams.cer" />
			</tarfileset>
				
			<!-- Sample configuration files with credentials -->
			<tarfileset uid="500" group="gva" dir="${basedir}/etc/sample" prefix="etc/prod">
				<include name="auth.properties" />
				<include name="log4j.properties" />
				<include name="systemConfig.xml" />
			</tarfileset>
		</tar>
		
		<!-- Package the ACARS server source -->
		<tar destfile="${java.io.tmpdir}/src/golgotha_acars.tar" longfile="fail">
			<tarfileset uid="500" group="gva" dir="${basedir}/../DVA ACARS">
				<include name="src/java/**/*.java" />
				<include name="sql/**" />
				<include name="*" />
			</tarfileset>
		</tar>
		
		<!-- Compress the TARs -->
		<gzip src="${java.io.tmpdir}/src/golgotha.tar" destfile="${java.io.tmpdir}/src/golgotha.tar.gz" />
		<gzip src="${java.io.tmpdir}/src/golgotha_acars.tar" destfile="${java.io.tmpdir}/src/golgotha_acars.tar.gz" />
		<delete file="${java.io.tmpdir}/src/golgotha.tar" />
		<delete file="${java.io.tmpdir}/src/golgotha_acars.tar" />
			
		<!-- Upload to the web site -->
		<loadproperties srcFile="data/build_deploy.properties" />
		<scp todir="${golgotha.ssh.user}@${golgotha.ssh.server}:${golgotha.ssh.path}" verbose="yes"
				trust="yes" password="${golgotha.ssh.pwd}">
			<fileset dir="${java.io.tmpdir}/src">
				<include name="*.tar.gz" />
				<modified seldirs="true" algorithm="digest">
						<param name="algorithm.algorithm" value="MD5" />
						<param name="cache.cachefile" value="../.local_data/src.cache.txt" />
				</modified>
			</fileset>
		</scp>
	</target>
</project>
