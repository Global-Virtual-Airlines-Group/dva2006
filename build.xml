<?xml version="1.0" encoding="UTF-8"?>
<project default="deploy">
	<!-- Clean out documentation -->
	<target name="doc_clean">
    	<property name="path.doc" value="/usr/local/www/deltava.org/www" />		
		<property file="data/build_doc.properties" prefix="doc" />

		<ftp password="${doc.ftp.pwd}" server="${doc.ftp.server}" userid="${doc.ftp.user}"
    	 remotedir="${path.doc}" action="del">
    		<fileset>
    			<include name="junit/**.*" />
    			<include name="javadoc/**.*" />
    		</fileset>
    	</ftp>  
	</target>

	<!-- Buld the JavaDoc -->
    <target name="javadoc">
		<mkdir dir="${java.io.tmpdir}/javadoc" />
        <javadoc destdir="${java.io.tmpdir}/javadoc" access="package" source="1.4" use="false"
    		useexternalfile="true" notree="false" nonavbar="false" noindex="false" splitindex="true" 
        	author="true" version="true" nodeprecatedlist="false" nodeprecated="false">
        	<fileset dir="src/java" />
            <link href="http://java.sun.com/j2se/1.4.2/docs/api" />
        	<link href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api" />
        	<link href="http://www.jdom.org/docs/apidocs" />
        	<link href="http://logging.apache.org/log4j/docs/api" />
        	<link href="http://www.servlets.com/cos/javadoc" />
        	
           	<doctitle><![CDATA[<h2>DVA2006 API Documentation</h2>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2005 Luke J. Kolin. All Rights Reserved.</i>]]></bottom>
        </javadoc>
    	
   		<!-- Load the FTP server properties -->
    	<property name="path.javadoc" value="/usr/local/www/deltava.org/www/javadoc" />
   		<loadproperties srcFile="data/build_doc.properties">
   			<filterchain>
	   			<prefixlines prefix="javadoc." />
   			</filterchain>
   		</loadproperties>    	
    	
    	<!-- Clean out the JavaDoc -->
		<ftp password="${javadoc.ftp.pwd}" server="${javadoc.ftp.server}" userid="${javadoc.ftp.user}"
    	 remotedir="${path.javadoc}" action="del">
    		<fileset>
    			<include name="**/**.*" />
    		</fileset>
    	</ftp>    	
    	
    	<!-- Upload the JavaDoc -->
    	<ftp password="${javadoc.ftp.pwd}" server="${javadoc.ftp.server}" userid="${javadoc.ftp.user}"
    	 remotedir="${path.javadoc}" action="send" verbose="yes">
    		<fileset dir="${java.io.tmpdir}/javadoc" />
    	</ftp>
    	
    	<!-- Clean out the temp folder -->
    	<delete dir="${java.io.tmpdir}/javadoc" />
    </target>
	
	<target name="junit">
		<!-- Execute the JUnit tests -->
		<mkdir dir="${java.io.tmpdir}/junit" />
		<junit fork="on" forkmode="perBatch" dir="${basedir}" printsummary="yes" showoutput="yes">
		    <classpath>
				<pathelement path="${classpath}" />
		    	<pathelement location="./bin" />
		    	<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
		    </classpath>
			
			<formatter type="xml" />
			<batchtest todir="${java.io.tmpdir}/junit">
				<fileset dir="src/test">
					<include name="**/Test*.java" />
				</fileset>
			</batchtest>
		</junit>
		
		<!-- Generate the JUnit report -->
		<mkdir dir="${java.io.tmpdir}/junit_report" />		
		<junitreport todir="${java.io.tmpdir}/junit">
			<fileset dir="${java.io.tmpdir}/junit">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${java.io.tmpdir}/junit_report" />
		</junitreport>
		
		<!-- Load the FTP server properties -->
		<property name="path.junit" value="/usr/local/www/deltava.org/www/junit" />
		<property file="data/build_doc.properties" prefix="junit" />
		
    	<!-- Upload the JUnit report -->
    	<ftp password="${junit.ftp.pwd}" server="${junit.ftp.server}" userid="${junit.ftp.user}"
    	 remotedir="${path.junit}" action="send" verbose="yes">
    		<fileset dir="${java.io.tmpdir}/junit_report" />
    	</ftp>

		<!-- Clean out the temporary paths -->
		<delete dir="${java.io.tmpdir}/junit" />
		<delete dir="${java.io.tmpdir}/junit_report" />
	</target>

	<!-- Compile the Java classes -->
	<target name="compile">
		<mkdir dir="${java.io.tmpdir}/build/classes" />
		<javac srcdir="src/java" optimize="on" destdir="${java.io.tmpdir}/build/classes"
		 debug="true" debuglevel="lines,vars,source" source="1.4" target="1.4"
		 compiler="modern">
	    	<classpath>
				<pathelement path="${classpath}" />
		    	<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
	    	</classpath>
		</javac>
		
		<!-- Compress the Java classes into a single JAR file -->
		<jar basedir="${java.io.tmpdir}/build/classes" compress="true" index="true"
		 destfile="${java.io.tmpdir}/build/dva2006.jar" />
	</target>
	
	<!-- Build the ACARS Server -->
	<target name="acars" depends="compile">
		<mkdir dir="${java.io.tmpdir}/build/acars" />
		<javac srcdir="../DVA ACARS/src/java" optimize="on" destdir="${java.io.tmpdir}/build/acars"
		 debug="true" debuglevel="lines,vars,source" source="1.4" target="1.4"
		 compiler="modern">
	    	<classpath>
				<pathelement path="${classpath}" />
	    		<pathelement location="lib/deploy/jdom-1.0.jar" />
	    		<pathelement location="lib/deploy/log4j-1.2.9.jar" />
	    		<pathelement location="${java.io.tmpdir}/build/dva2006.jar" />
	    	</classpath>
		</javac>

		<!-- Compress the Java classes into a single JAR file -->
		<jar basedir="${java.io.tmpdir}/build/acars" compress="true" index="true"
		 destfile="${java.io.tmpdir}/build/dva_acars.jar" />
	</target>
	
	<!-- Precompile the JSP pages -->
	<target name="jspc" depends="compile">
		<property name="jspc.webXMLInc" value="${java.io.tmpdir}/src/jsp/include.xml" />
		<taskdef classname="org.apache.jasper.JspC" name="jasper2"> 
			<classpath id="jspc.classpath"> 
				<pathelement path="${classpath}" />
				<pathelement location="${java.io.tmpdir}/build/dva2006.jar" />
				<fileset dir="./lib" includes="**/*.jar" /> 
			</classpath> 
		</taskdef>
		
		<!-- Delete the old web.xml files -->
		<delete file="${java.io.tmpdir}/build/web.xml" />
		<delete file="${basedir}/WEB-INF/web.xml" />
		
		<!-- Precompile the files -->
		<mkdir dir="${java.io.tmpdir}/src/jsp" />
		<copy file="WEB-INF/web_core.xml" tofile="${basedir}/WEB-INF/web.xml" />
	    <jasper2 package="org.deltava" uriroot="${basedir}" verbose="0" poolingEnabled="true" xpoweredBy="true" 
			validateXml="truee" webXmlFragment="${jspc.webXMLInc}"
	    	outputDir="${java.io.tmpdir}/src/jsp" />
		<delete file="${basedir}/WEB-INF/web.xml" />		

		<!-- Compile the files -->
		<mkdir dir="${java.io.tmpdir}/build/jsp" />
		<javac srcdir="${java.io.tmpdir}/src/jsp" destdir="${java.io.tmpdir}/build/jsp" debug="on"
			debuglevel="source" optimize="on" target="1.4">
			<classpath refid="jspc.classpath" />
			<include name="org/deltava/jsp/**/*.java" />
		</javac>
		
		<!-- Compress the Java classes into a single JAR file -->
		<jar basedir="${java.io.tmpdir}/build/jsp" compress="true" index="true"
		 	destfile="${java.io.tmpdir}/build/dva2006_jsp.jar" />
		 		 
		<!-- Merge the precompile definitions into web.xml -->
		<loadfile property="webXmlFragment" srcFile="${jspc.webXMLInc}" />
		<copy file="WEB-INF/web_core.xml" tofile="${java.io.tmpdir}/build/web.xml" />
		<replace file="${java.io.tmpdir}/build/web.xml" token="&lt;!-- [INSERT FRAGMENT HERE] --&gt;" value="${webXmlFragment}" /> 
	</target>
	
	<target name="deploy" depends="compile,acars,jspc">
		<!-- Load the server properties -->
		<property name="path.webapp" value="/dva2006" />
		<property name="path.http" value="/dva2006" />
		<loadproperties srcFile="data/build_deploy.properties" />
		
		<!-- Upload the root data to the app server -->
		<echo message="Uploading WEB-INF configuration data" />
		<ftp server="${webapp.ftp.server}" userid="${webapp.ftp.user}" password="${webapp.ftp.pwd}"
		 	remotedir="${path.webapp}/WEB-INF" action="send" depends="yes" verbose="yes">
	    	<fileset dir="WEB-INF">
	    		<include name="*.tld" />
			</fileset>
			<fileset file="${java.io.tmpdir}/build/web.xml" />
		</ftp>
		
		<!-- Upload the libraries to the app server -->
		<echo message="Uploading Library Jars" />
		<ftp server="${webapp.ftp.server}" userid="${webapp.ftp.user}" password="${webapp.ftp.pwd}"
		 remotedir="${path.webapp}/WEB-INF/lib" action="send" depends="yes" verbose="yes">
			<fileset dir="lib/deploy" includes="*.jar" />
			<fileset dir="${java.io.tmpdir}/build" includes="*.jar" />
		</ftp>
		
		<!-- Upload configuration files to the app server -->
		<echo message="Uploading Configuration files" />
		<ftp server="${webapp.ftp.server}" userid="${webapp.ftp.user}" password="${webapp.ftp.pwd}"
		 	remotedir="${path.webapp}/WEB-INF/classes/etc" action="send" depends="yes" verbose="yes">
			<fileset dir="etc" includes="*.*" />
		</ftp>
		
		<!-- Upload static content to the HTTP server -->
		<echo message="Uploading static content to HTTP server" />
		<ftp server="${http.ftp.server}" userid="${http.ftp.user}" password="${http.ftp.pwd}"
		 	remotedir="${path.http}" action="send" depends="yes" verbose="yes">
			<fileset dir="static" includes="**/*" />
		</ftp>
	</target>
	
	<!-- Clean out compiled data -->
	<target name="clean">
		<delete dir="${java.io.tmpdir}/build" />
		<delete dir="${java.io.tmpdir}/src/jsp" />
		<delete file="${java.io.tmpdir}/build/web.xml" />
	</target>
	
	<!-- Get log file and view it -->
	<target name="getlogs">
		<loadproperties srcFile="data/build_deploy.properties" />
		<scp todir="${basedir}/local_data" verbose="yes" trust="yes" password="${webapp.ssh.pwd}"
			file="${webapp.ssh.user}@${webapp.ssh.server}:/usr/local/jakarta-tomcat5.0/logs/catalina.out" />
		<exec executable="c:\program files\textpad 4\textpad.exe" spawn="yes">
			<arg value="${basedir}\local_data\catalina.out" />
		</exec>
	</target>
		
	<!-- Upload scripts to the app server -->
	<target name="put_scripts">
		<loadproperties srcFile="data/build_deploy.properties" />

		<!-- Create the upload directory -->
		<sshexec host="${webapp.ssh.server}" username="${webapp.ssh.user}" trust="yes"
						password="${webapp.ssh.pwd}" failonerror="false" timeout="5000"
						command="mkdir /tmp/scripts" />
			
		<!-- Upload the scripts -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:/tmp/scripts" verbose="yes"
			trust="yes" password="${webapp.ssh.pwd}">
			<fileset dir="scripts/${webapp.ssh.os}">
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="local_data/static.cache.txt" />
				</modified>
			</fileset>
		</scp>
			
		<!-- Copy the scripts to the proper directory -->
<!--		<sshexec host="${webapp.ssh.server}" username="${webapp.ssh.user}" trust="yes"
			password="${webapp.ssh.pwd}" failonerror="true" timeout="10000"
			command="sudo /usr/local/sbin/update_scripts.sh" /> -->
	</target>
	
	<!-- Production Deployment via SSH -->
	<target name="prod_deploy" depends="compile,acars,jspc,put_scripts">
		<!-- Upload the web configuration -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path}/WEB-INF"
				verbose="yes" trust="yes" password="${webapp.ssh.pwd}">
	    	<fileset dir="WEB-INF">
	    		<include name="*.tld" />
				<modified seldirs="false" algorithm="digest">
						<param name="algorithm.algorithm" value="MD5" />
						<param name="cache.cachefile" value="local_data/cfg.cache.txt" />
				</modified>
			</fileset>
			<fileset file="${java.io.tmpdir}/build/web.xml">
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="local_data/cfg.cache.txt" />
				</modified>
			</fileset>
		</scp>

		<!-- Upload the JAR files to the app server -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path}/WEB-INF/lib"
			verbose="yes" trust="yes" password="${webapp.ssh.pwd}">
			<fileset dir="lib/deploy" includes="*.jar">
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="local_data/jar.cache.txt" />
				</modified>
			</fileset>
			<fileset dir="${java.io.tmpdir}/build" includes="*.jar">
				<modified seldirs="false" algorithm="digest">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="local_data/jar.cache.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload the config file to the app server -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path}/WEB-INF/classes/etc"
			verbose="yes" trust="yes" password="${webapp.ssh.pwd}">
			<fileset dir="etc">
				<include name="commands.xml" />
				<include name="services.xml" />
				<include name="tasks.xml" />
				<modified seldirs="false" algorithm="digest">
						<param name="algorithm.algorithm" value="MD5" />
						<param name="cache.cachefile" value="local_data/cfg.cache.txt" />
				</modified>
			</fileset>
			<fileset dir="etc/prod">
				<modified seldirs="false" algorithm="digest">
						<param name="algorithm.algorithm" value="MD5" />
						<param name="cache.cachefile" value="local_data/cfg.cache.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload static content to the HTTP server -->
		<scp todir="${http.ssh.user}@${http.ssh.server}:${http.ssh.path}"
			verbose="yes" trust="yes" password="${http.ssh.pwd}">
			<fileset dir="static">
				<modified seldirs="true" algorithm="digest">
						<param name="algorithm.algorithm" value="MD5" />
						<param name="cache.cachefile" value="local_data/static.cache.txt" />
				</modified>
			</fileset>
		</scp>
	</target>
</project>
