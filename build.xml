<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2005, 2006, 2008, 2010, 2011, 2012, 2013, 2014, 2015 Global Virtual Airlines Group. All Rights Reserved. -->
<project default="deploy">
    <target name="javadoc" description="Build the Golgotha JavaDoc">
		<mkdir dir="${java.io.tmpdir}/javadoc" />
        <javadoc destdir="${java.io.tmpdir}/javadoc" access="package" source="1.8" use="false"
    		useexternalfile="true" notree="false" nonavbar="false" noindex="false" splitindex="true" 
        	author="true" version="true" nodeprecatedlist="false" nodeprecated="false">
        	<fileset dir=".">
        		<include name="src/java/**/*.java" />
        		<include name="../DVA ACARS/src/java/**/*.java" />
        	</fileset>
            <link href="http://download.oracle.com/javase/8/docs/api/" />
        	<link href="http://download.oracle.com/javaee/6/api/" />
        	<link href="http://www.jdom.org/docs/apidocs" />
        	<link href="http://logging.apache.org/log4j/1.2/apidocs/" />

   	    	<classpath>
   				<pathelement path="${classpath}" />
   		    	<fileset dir="lib">
   					<include name="**/*.jar"/>
   				</fileset>
   	    	</classpath>
        	
           	<doctitle><![CDATA[<h2>Golgotha API Documentation</h2>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2004-2015 Global Virtual Airlines Group. All Rights Reserved.</i>]]></bottom>
        </javadoc>
    	
		<!-- TAR up the JavaDoc -->
    	<tar destfile="${java.io.tmpdir}/golgotha_javadoc.tar" longfile="fail">
			<tarfileset uid="1000" group="gva" dir="${java.io.tmpdir}/javadoc" />
    	</tar>

    	<!-- Compress the TAR file -->
		<bzip2 src="${java.io.tmpdir}/golgotha_javadoc.tar" destfile="${java.io.tmpdir}/golgotha_javadoc.tar.bz2" />
		<delete file="${java.io.tmpdir}/golgotha_javadoc.tar" />

   		<!-- Load the SCP server properties -->
   		<loadproperties srcFile="data/build_doc.properties">
   			<filterchain>
	   			<prefixlines prefix="javadoc." />
   			</filterchain>
   		</loadproperties>
    	<property name="javadoc.ssh.port" value="22" />
    	<property name="javadoc.ssh.user" value="${user.name}" />

    	<!-- Clean out the JavaDoc -->
    	<sshexec keyfile="${javadoc.ssh.key}" username="${javadoc.ssh.user}" trust="yes"
    		host="${javadoc.ssh.server}" timeout="37500" failonerror="no" port="${javadoc.ssh.port}"
    		command="rm -rf ${javadoc.ssh.path.javadoc}/*" />

    	<!-- Upload the JavaDoc archive -->
    	<scp todir="${javadoc.ssh.user}@${javadoc.ssh.server}:/tmp" trust="yes" verbose="yes" port="${javadoc.ssh.port}" 
    		keyfile="${javadoc.ssh.key}" localfile="${java.io.tmpdir}/golgotha_javadoc.tar.bz2" />

    	<!-- Explode the JavaDoc -->
    	<sshexec keyfile="${javadoc.ssh.key}" username="${javadoc.ssh.user}" trust="yes"
    		host="${javadoc.ssh.server}" timeout="37500" failonerror="no" port="${javadoc.ssh.port}"
    		command="cd ${javadoc.ssh.path.javadoc} ; tar xvfj /tmp/golgotha_javadoc.tar.bz2" />
		<sshexec keyfile="${javadoc.ssh.key}" username="${javadoc.ssh.user}" trust="yes"
    	    host="${javadoc.ssh.server}" timeout="12500" failonerror="no" port="${javadoc.ssh.port}"
    	    command="rm /tmp/golgotha_javadoc.tar.bz2" />

    	<!-- Clean out the temp folder -->
    	<delete dir="${java.io.tmpdir}/javadoc" />
    	<delete file="${java.io.tmpdir}/javadoc.tar.bz2" />
    </target>
	
	<target name="junit" description="Execute the JUnit tests">
		<mkdir dir="${java.io.tmpdir}/junit" />
		<junit fork="on" forkmode="perBatch" dir="${basedir}" printsummary="yes" showoutput="yes">
		    <classpath>
				<pathelement path="${classpath}" />
		    	<pathelement location="./bin" />
		    	<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
		    </classpath>
			
			<formatter type="xml" />
			<batchtest todir="${java.io.tmpdir}/junit">
				<fileset dir="src/test">
					<include name="**/Test*.java" />
				</fileset>
			</batchtest>
		</junit>
		
		<!-- Generate the JUnit report -->
		<mkdir dir="${java.io.tmpdir}/junit_report" />		
		<junitreport todir="${java.io.tmpdir}/junit">
			<fileset dir="${java.io.tmpdir}/junit">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${java.io.tmpdir}/junit_report" />
		</junitreport>
		
		<!-- Load the FTP server properties -->
		<property name="path.junit" value="/home/www/deltava.org/www/junit" />
		<property file="data/build_doc.properties" prefix="junit" />
		
    	<!-- Upload the JUnit report -->
    	<ftp password="${junit.ftp.pwd}" server="${junit.ftp.server}" userid="${junit.ftp.user}"
    	 remotedir="${path.junit}" action="send" verbose="yes">
    		<fileset dir="${java.io.tmpdir}/junit_report" />
    	</ftp>

		<!-- Clean out the temporary paths -->
		<delete dir="${java.io.tmpdir}/junit" />
		<delete dir="${java.io.tmpdir}/junit_report" />
	</target>
	
	<target name="compile" unless="task.compile" description="Compile the Java classes">
		<!-- Set build date/time -->
		<tstamp>
			<format property="build_utc" timezone="Etc/Greenwich" pattern="yyyyMMdd HHmmss Z" />
		</tstamp>
		
		<mkdir dir="${java.io.tmpdir}/build" />
	    <property name="jar.core" value="${java.io.tmpdir}/build/golgotha.jar" />
	    <property name="jar.web" value="${java.io.tmpdir}/build/golgotha_web.jar" />
	    <property name="jar.jsp" value="${java.io.tmpdir}/build/golgotha_jsp.jar" />
		
		<!-- Compile the code -->
		<mkdir dir="${java.io.tmpdir}/build/classes" />
		<javac srcdir="src/java" destdir="${java.io.tmpdir}/build/classes" debug="true" includeantruntime="false"
		 debuglevel="lines,vars,source" source="1.8" target="1.8" compiler="modern" fork="true">
			<compilerarg value="-Xlint:unchecked,deprecation,finally" />
	    	<classpath id="javac.classpath">
				<pathelement path="${classpath}" />
		    	<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
	    	</classpath>
		</javac>
		
		<!-- Save Build date/time in property file -->
		<propertyfile file="${java.io.tmpdir}/build/golgotha_build.properties" comment="Golgotha build properties">
			<entry key="build.date" value="${build_utc}" />
			<entry key="build.ant" value="${ant.version}" />
			<entry key="build.jvm" value="${ant.java.version}" />
			<entry key="build.os" value="${os.name} ${os.version} ${os.arch}" />
		</propertyfile>
		
		<!-- Compress the base Java classes into a single JAR file -->
		<jar basedir="${java.io.tmpdir}/build/classes" compress="true" index="true" destfile="${jar.core}">
			<exclude name="org/deltava/commands/**/*.class" />
			<exclude name="org/deltava/security/command/*.class" />
			<exclude name="org/deltava/service/**/*.class" />
			<exclude name="org/deltava/servlet/**/*.class" />
			<exclude name="org/deltava/taglib/**/*.class" />
			<exclude name="org/deltava/taskman/*.class" />
			<exclude name="org/deltava/tasks/*.class" />
		</jar>
		
		<!-- Compress the web-specific classes into another JAR file -->
		<jar basedir="${java.io.tmpdir}/build/classes" compress="true" index="true" destfile="${jar.web}">
			<include name="org/deltava/commands/**/*.class" />
			<include name="org/deltava/security/command/*.class" />
			<include name="org/deltava/service/**/*.class" />
			<include name="org/deltava/servlet/**/*.class" />
			<include name="org/deltava/taglib/**/*.class" />
			<include name="org/deltava/taskman/*.class" />
			<include name="org/deltava/tasks/*.class" />
		</jar>
		
		<property name="task.compile" value="true" />
	</target>

	<target name="jspc" depends="compile" unless="task.jspc" description="Precompile the JSP pages">
		<property name="jspc.webXMLInc" value="${java.io.tmpdir}/src/jsp/include.xml" />
		<taskdef classname="org.apache.jasper.JspC" name="jasper2">
			<classpath id="jspc.classpath"> 
				<pathelement path="${classpath}" />
				<fileset dir="${java.io.tmpdir}/build" includes="*.jar" />
				<fileset dir="./lib" includes="**/*.jar" />
			</classpath> 
		</taskdef>
		
		<!-- Delete the old web.xml files -->
		<delete file="${java.io.tmpdir}/build/web.xml" />
		<delete file="${basedir}/WEB-INF/web.xml" />
		
		<!-- Precompile the files -->
		<mkdir dir="${java.io.tmpdir}/src/jsp" />
		<copy file="WEB-INF/web_core.xml" tofile="${basedir}/WEB-INF/web.xml" />
	    <jasper2 package="org.deltava" uriroot="${basedir}" verbose="0" poolingEnabled="true" xpoweredBy="false" validateXml="false"
	    	webXmlFragment="${jspc.webXMLInc}" compilerTargetVM="1.8" compilerSourceVM="1.8" trimSpaces="false" outputDir="${java.io.tmpdir}/src/jsp" />
		<delete file="${basedir}/WEB-INF/web.xml" />

		<!-- Compile the files -->
		<mkdir dir="${java.io.tmpdir}/build/jsp" />
		<javac srcdir="${java.io.tmpdir}/src/jsp" destdir="${java.io.tmpdir}/build/jsp" compiler="modern" debug="on" debuglevel="source" target="1.8" source="1.8" includeantruntime="false" fork="true">
			<compilerarg value="-Xlint:deprecation,finally" />
			<classpath refid="jspc.classpath" />
			<include name="org/deltava/jsp/**/*.java" />
		</javac>
		
		<!-- Compress the Java classes into a single JAR file -->
		<jar basedir="${java.io.tmpdir}/build/jsp" compress="true" index="true" destfile="${jar.jsp}" />
		 		 
		<!-- Merge the precompile definitions into web.xml -->
		<loadfile property="webXmlFragment" srcFile="${jspc.webXMLInc}" />
		<copy file="WEB-INF/web_core.xml" tofile="${java.io.tmpdir}/build/web.xml" />
		<replace file="${java.io.tmpdir}/build/web.xml" token="&lt;!-- [INSERT FRAGMENT HERE] --&gt;" value="${webXmlFragment}" />
		
		<property name="task.compile" value="true" />
	</target>

	<target name="minify" unless="task.minify" description="Minify JS and CSS">
		<available file="lib/YUIAnt.jar" property="YUIANT_AVAILABLE" />
		<fail unless="YUIANT_AVAILABLE" message="Run jar target to generate the required task" />
		<taskdef name="yuicompress" classname="com.yahoo.platform.yui.compressor.YUICompressTask">
			<classpath>
				<fileset dir="./lib" includes="yuicompressor-*.jar" />
				<pathelement path="lib/YUIAnt.jar" />
			</classpath>
		</taskdef>

		<!-- Minify JS -->
		<mkdir dir="${java.io.tmpdir}/build/min/js" />
		<yuicompress linebreak="300" warn="false" munge="yes" preserveallsemicolons="true" outputfolder="${java.io.tmpdir}/build/min/js">
			<fileset dir="static/js" >
				<include name="*.js" />
				<modified seldirs="true" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/min.cache.txt" />
				</modified>
			</fileset>
		</yuicompress>
		<move todir="${java.io.tmpdir}/build/min/js" includeemptydirs="false">
			<fileset dir="${java.io.tmpdir}/build/min/js">
				<include name="*.js" />
				<exclude name="*-min.js" />
			</fileset>
			<mapper type="glob" from="*.js" to="*-min.js"/>
		</move>
		
		<!-- Minify CSS -->
		<mkdir dir="${java.io.tmpdir}/build/min/css" />
		<yuicompress linebreak="300" warn="false" munge="yes" preserveallsemicolons="true" outputfolder="${java.io.tmpdir}/build/min/css">
			<fileset dir="static/css" >
				<include name="**/*.css" />
				<modified seldirs="true" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/min.cache.txt" />
				</modified>
			</fileset>
		</yuicompress>
		<move todir="${java.io.tmpdir}/build/min/css" includeemptydirs="false">
			<fileset dir="${java.io.tmpdir}/build/min/css">
				<include name="**/*.css" />
				<exclude name="**/*-min.css" />
			</fileset>
			<mapper type="glob" from="*.css" to="*-min.css"/>
		</move>
		
		<property name="task.minify" value="true" />
	</target>

	<target name="deploy" depends="jspc,minify" description="Deploy to development environment">
		<loadproperties srcFile="data/build_deploy.properties" />
		<property name="webapp.dev.port" value="22" />
		<property name="webapp.dev.user" value="${user.name}" />
		<property name="http.dev.port" value="22" />
		<property name="http.dev.user" value="${user.name}" />
		<mkdir dir="../.local_data" />

		<!-- Upload the web configuration -->
		<scp todir="${webapp.dev.user}@${webapp.dev.server}:${webapp.dev.path}/WEB-INF"
			port="${webapp.dev.port}" verbose="yes" trust="yes" keyfile="${webapp.dev.key}">
			<fileset file="${java.io.tmpdir}/build/web.xml">
				<modified seldirs="false" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/cfg.cache.dev.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload the common JAR files to the app server -->
		<scp todir="${webapp.dev.user}@${webapp.dev.server}:${webapp.dev.path.common}"
			port="${webapp.dev.port}" verbose="yes" trust="yes" keyfile="${webapp.dev.key}">
			<fileset dir="lib/deploy" includes="*.jar">
				<exclude name="spymemcached*.jar" />
				<modified seldirs="false" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/jar.cache.dev.txt" />
				</modified>
			</fileset>
		</scp>

		<!-- Upload the JAR files to the app server -->
		<scp todir="${webapp.dev.user}@${webapp.dev.server}:${webapp.dev.path}/WEB-INF/lib"
			port="${webapp.dev.port}" verbose="yes" trust="yes" keyfile="${webapp.dev.key}">
	 		<fileset dir="${java.io.tmpdir}/build">
				<include name="golgotha.jar" />
	 			<include name="golgotha_web.jar" />
				<include name="golgotha_jsp.jar" />
				<modified seldirs="false" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/jar.cache.dev.txt" />
				</modified>
			</fileset>
			<fileset dir="lib/deploy">
				<include name="spymemcached*.jar" />
				<modified seldirs="false" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/jar.cache.dev.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload the config file to the app server -->
		<scp todir="${webapp.dev.user}@${webapp.dev.server}:${webapp.dev.path}/WEB-INF/classes/etc"
			port="${webapp.dev.port}" verbose="yes" trust="yes" keyfile="${webapp.dev.key}">
			<fileset dir="etc" includes="*.*">
				<exclude name="log4j.test.properties" />
				<modified seldirs="false" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/cfg.cache.dev.txt" />
				</modified>
			</fileset>
		</scp>

		<!-- Upload static content to the HTTP server -->
		<scp todir="${http.dev.user}@${http.dev.server}:${http.dev.path}" 
			port="${http.dev.port}" verbose="yes" trust="yes" keyfile="${http.dev.key}">
			<fileset dir="static">
				<modified seldirs="true" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/static.cache.dev.txt" />
				</modified>
			</fileset>
			<fileset dir="${java.io.tmpdir}/build/min">
				<modified seldirs="true" algorithm="digest" update="true" delayupdate="false">
						<param name="algorithm.algorithm" value="MD5" />
						<param name="cache.cachefile" value="../.local_data/static.cache.dev.txt" />
				</modified>
			</fileset>
		</scp>
	</target>
	
	<!-- Generate classes based on FlightAware WSDL -->
	<target name="fa_wsdl" description="Compile FlightXML2 WSDL">
		<taskdef name="wsdl2java" classname="org.apache.axis.tools.ant.wsdl.Wsdl2javaAntTask">
			<classpath id="wsdl.classpath"> 
				<fileset dir="lib">
					<include name="axis-ant-*.jar" />
					<include name="deploy/axis-*.jar" />
					<include name="wsdl4j-*.jar" />
					<include name="deploy/jaxrpc-*.jar" />
					<include name="deploy/commons-logging-*.jar" />
					<include name="commons-discovery-*.jar" />
					<include name="deploy/javamail-*.jar" />
				</fileset>
			</classpath> 
	  	</taskdef>

		<!-- Build the Java source files -->
		<mkdir dir="${java.io.tmpdir}/src/wsdl" />
		<wsdl2java debug="false" output="${java.io.tmpdir}/src/wsdl" url="data/flightXMLv2.wsdl" />
		
		<!-- Compile the Java source files -->
		<mkdir dir="${java.io.tmpdir}/build/wsdl" />
		<javac srcdir="${java.io.tmpdir}/src/wsdl" destdir="${java.io.tmpdir}/build/wsdl"
			debug="on" debuglevel="source" optimize="on" target="1.8" source="1.8">
			<classpath refid="wsdl.classpath" />
			<compilerarg value="-Xlint:deprecated,finally" />
		</javac>

		<!-- Compress the Java classes into a single JAR file -->
		<jar basedir="${java.io.tmpdir}/build/wsdl" compress="true" index="true"
		 	destfile="lib/deploy/flightaware.jar" />
		
		<!-- Archive the source -->
		<zip destfile="lib/src/flightaware.zip" basedir="${java.io.tmpdir}/src/wsdl" includes="**/*.java" />
	</target>
	
	<!-- Clean out compiled data -->
	<target name="clean" description="Clean build paths">
		<delete dir="${java.io.tmpdir}/build" />
		<delete dir="${java.io.tmpdir}/src/jsp" />
		<delete file="${java.io.tmpdir}/build/web.xml" />
		<delete file="../.local_data/min.cache.txt" />
	</target>
	
	<!-- Upload scripts to the app server -->
	<target name="put_scripts" description="Deploy bash scripts to production">
		<loadproperties srcFile="data/build_deploy.properties" />
		<property name="webapp.ssh.port" value="22" />
		<property name="webapp.ssh.user" value="${user.name}" />
		<mkdir dir="../.local_data" />

		<!-- Upload the scripts -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:/usr/local/sbin/www"
			port="${webapp.ssh.port}" verbose="yes" trust="yes" keyfile="${webapp.ssh.key}">
			<fileset dir="scripts/${webapp.ssh.os}">
				<modified seldirs="false" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/static.cache.txt" />
				</modified>
			</fileset>
		</scp>
	</target>
	
	<!-- Production Deployment via SSH -->
	<target name="prod_deploy" depends="jspc,minify" description="Deploy to Production environment">
		<loadproperties srcFile="data/build_deploy.properties" />
		<property name="webapp.ssh.port" value="22" />
		<property name="webapp.ssh.user" value="${user.name}" />
		<property name="http.ssh.port" value="22" />
		<property name="http.ssh.user" value="${user.name}" />
		<mkdir dir="../.local_data" />

		<!-- Upload the web configuration -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path}"
			port="${webapp.ssh.port}" verbose="yes" trust="yes" keyfile="${webapp.ssh.key}">
			<fileset file="${java.io.tmpdir}/build/web.xml">
				<modified seldirs="false" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/cfg.cache.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload the common JAR files to the app server -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path.common}"
			port="${webapp.ssh.port}" verbose="yes" trust="yes" keyfile="${webapp.ssh.key}">
			<fileset dir="lib/deploy" includes="*.jar">
				<exclude name="spymemcached*.jar" />
				<modified seldirs="false" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/jar.cache.txt" />
				</modified>
			</fileset>
		</scp>

		<!-- Upload the JAR files to the app server -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path}/lib"
			port="${webapp.ssh.port}" verbose="yes" trust="yes" keyfile="${webapp.ssh.key}">
			<fileset dir="${java.io.tmpdir}/build">
				<include name="golgotha.jar" />
				<include name="golgotha_web.jar" />
				<include name="golgotha_jsp.jar" />
				<modified seldirs="false" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/jar.cache.txt" />
				</modified>
			</fileset>
			<fileset dir="lib/deploy">
				<include name="spymemcached*.jar" />
				<modified seldirs="false" algorithm="digest" update="true" delayupdate="false">
					<param name="algorithm.algorithm" value="MD5" />
					<param name="cache.cachefile" value="../.local_data/jar.cache.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload the config file to the app server -->
		<scp todir="${webapp.ssh.user}@${webapp.ssh.server}:${webapp.ssh.path}/classes/etc"
			port="${webapp.ssh.port}" verbose="yes" trust="yes" keyfile="${webapp.ssh.key}">
			<fileset dir="etc">
				<include name="commands.xml" />
				<include name="services.xml" />
				<include name="codeshares.txt" />
				<include name="cacheInfo.xml" />
				<modified seldirs="false" algorithm="digest" update="true" delayupdate="false">
						<param name="algorithm.algorithm" value="MD5" />
						<param name="cache.cachefile" value="../.local_data/cfg.cache.txt" />
				</modified>
			</fileset>
			<fileset dir="etc/prod">
				<modified seldirs="false" algorithm="digest" update="true" delayupdate="false">
						<param name="algorithm.algorithm" value="MD5" />
						<param name="cache.cachefile" value="../.local_data/cfg.cache.txt" />
				</modified>
			</fileset>
		</scp>
		
		<!-- Upload static content to the HTTP server -->
		<scp todir="${http.ssh.user}@${http.ssh.server}:${http.ssh.path}" port="${http.ssh.port}" verbose="yes" trust="yes" keyfile="${http.ssh.key}">
			<fileset dir="static">
				<modified seldirs="true" algorithm="digest" update="true" delayupdate="false">
						<param name="algorithm.algorithm" value="MD5" />
						<param name="cache.cachefile" value="../.local_data/static.cache.txt" />
				</modified>
			</fileset>
			<fileset dir="${java.io.tmpdir}/build/min">
				<modified seldirs="true" algorithm="digest" update="true" delayupdate="false">
						<param name="algorithm.algorithm" value="MD5" />
						<param name="cache.cachefile" value="../.local_data/static.cache.txt" />
				</modified>
			</fileset>
		</scp>
	</target>

	<!-- Package source code -->
	<target name="put_source" description="Upload source code archive">
		<mkdir dir="${java.io.tmpdir}/src" />
		<tar destfile="${java.io.tmpdir}/src/golgotha.tar" longfile="fail">
			<tarfileset uid="500" group="gva" dir="${basedir}">
				<include name="src/java/**/*.java" />
				<include name="src/test/**/*.java" />
				<include name="lib/**" />
				<include name="jsp/**" />
				<include name="sql/**" />
				<include name="static/**" />
				<include name="WEB-INF/**" />
				<include name="*" />
			</tarfileset>
				
			<!-- Data files -->
			<tarfileset uid="500" group="gva" dir="${basedir}/data" prefix="data">
				<exclude name="build_deploy.properties" />
				<exclude name="build_doc.properties" />
				<exclude name="jdbc.properties" />
			</tarfileset>
				
			<!-- Sample data files with credentials -->
			<tarfileset uid="500" group="gva" dir="${basedir}/etc/sample" prefix="data">
				<include name="build_deploy.properties" />
				<include name="build_doc.properties" />
				<include name="jdbc.properties" />
			</tarfileset>
				
			<!-- Configuration files -->
			<tarfileset uid="500" group="gva" dir="${basedir}/etc" prefix="etc/prod">
				<include name="commands.xml" />
				<include name="services.xml" />
				<include name="tasks.xml" />
				<include name="codeshares.txt" />
				<include name="jcs.notams.cer" />
			</tarfileset>
				
			<!-- Sample configuration files with credentials -->
			<tarfileset uid="500" group="gva" dir="${basedir}/etc/sample" prefix="etc/prod">
				<include name="auth.properties" />
				<include name="log4j.properties" />
				<include name="systemConfig.xml" />
			</tarfileset>
		</tar>
		
		<!-- Package the ACARS server source -->
		<tar destfile="${java.io.tmpdir}/src/golgotha_acars.tar" longfile="fail">
			<tarfileset uid="500" group="gva" dir="${basedir}/../DVA ACARS">
				<include name="src/java/**/*.java" />
				<include name="sql/**" />
				<include name="*" />
			</tarfileset>
		</tar>
		
		<!-- Compress the TARs -->
		<gzip src="${java.io.tmpdir}/src/golgotha.tar" destfile="${java.io.tmpdir}/src/golgotha.tar.gz" />
		<gzip src="${java.io.tmpdir}/src/golgotha_acars.tar" destfile="${java.io.tmpdir}/src/golgotha_acars.tar.gz" />
		<delete file="${java.io.tmpdir}/src/golgotha.tar" />
		<delete file="${java.io.tmpdir}/src/golgotha_acars.tar" />
			
		<!-- Upload to the web site -->
		<loadproperties srcFile="data/build_deploy.properties" />
		<property name="golgotha.ssh.port" value="22" />
		<property name="golgotha.ssh.user" value="${user.name}" />
		
		<scp todir="${golgotha.ssh.user}@${golgotha.ssh.server}:${golgotha.ssh.path}" verbose="yes"
			port="${golgotha.ssh.port}" trust="yes" keyfile="${golgotha.ssh.key}">
			<fileset dir="${java.io.tmpdir}/src">
				<include name="*.tar.gz" />
				<modified seldirs="true" algorithm="digest" update="true" delayupdate="false">
						<param name="algorithm.algorithm" value="MD5" />
						<param name="cache.cachefile" value="../.local_data/src.cache.txt" />
				</modified>
			</fileset>
		</scp>
	</target>
</project>
