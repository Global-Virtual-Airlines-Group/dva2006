// Copyright 2009 Global Virtual Airlines Group. All Rights Reserved.
package org.deltava.util.flightplan;

import java.io.*;
import java.util.*;

import org.deltava.beans.navdata.NavigationDataBean;
import org.deltava.util.GeoUtils;
import org.deltava.util.StringUtils;

/**
 * A Flight Plan Generator for Microsoft Flight Simulator X.
 * @author Luke
 * @version 2.4
 * @since 2.4
 */

public class FSXGenerator extends FlightPlanGenerator {

	/**
	 * Generates an FSX flight plan between two airports.
	 * @param waypoints a Collection of waypoints
	 * @return the generated flight plan file
	 */
	public byte[] generate(Collection<NavigationDataBean> waypoints) {
		
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		PrintWriter ctx = new CustomNewlineWriter(out, "\r\n");
		
		// Write header
		ctx.println("[flightplan]");
		ctx.println("title=" + _aD.getICAO() + " to " + _aA.getICAO());
		ctx.println("description=" + _aD.getICAO() + ", " + _aA.getICAO());
		ctx.println("type=IFR");
		ctx.println("routetype=0");
		ctx.println("cruising_altitude=" + _altitude);
		ctx.println("departure_id=" + _aD.getICAO() + ", " + GeoUtils.formatFS9(_aD) + ", +" + StringUtils.format(_aD.getAltitude(), "000000.00") + ",");
		ctx.println("destination_id=" + _aA.getICAO() + ", " + GeoUtils.formatFS9(_aA) + ", " + StringUtils.format(_aA.getAltitude(), "000000.00") + ",");
		ctx.println("departure_name=" + _aD.getName());
		ctx.println("destination_name=" + _aA.getName());
		
		// Write the route entries
		int waypointIdx = 0;
		for (Iterator<NavigationDataBean> i = waypoints.iterator(); i.hasNext(); ) {
			NavigationDataBean nd = i.next();
			ctx.print("waypoint." + String.valueOf(waypointIdx) + "=");
			ctx.print(nd.getCode());
			switch (nd.getType()) {
				case NavigationDataBean.AIRPORT:
				case NavigationDataBean.NDB:
				case NavigationDataBean.VOR:
					ctx.print(", ");
					ctx.print(nd.getTypeName().charAt(0));
					ctx.print(", ");
					break;
				
				default:
					ctx.print(", I, ");
			}
			
			ctx.print(GeoUtils.formatFS9(nd));
			ctx.print(", +000000.00,");
			if (nd.isInTerminalRoute()) {
				String aw = nd.getAirway();
				ctx.print(" ");
				ctx.println(aw.substring(0, aw.indexOf('.')));
			} else if (nd.getAirway() != null) {
				ctx.print(" ");
				ctx.println(nd.getAirway());
			} else
				ctx.println("");
			
			waypointIdx++;
		}

		// Flush and return
		ctx.close();
		return out.toByteArray();
	}

	/**
	 * Returns the MIME type of flight plans generated by this Generator.
	 * @return text/plain
	 */
	public String getMimeType() {
		return "text/plain";
	}
	
	/**
	 * Returns the file extension of flight plans generated by this Generator.
	 * @return pln
	 */
	public String getExtension() {
		return "pln";
	}
}