// Copyright 2009, 2010 Global Virtual Airlines Group. All Rights Reserved.
package org.deltava.util.flightplan;

import java.io.*;
import java.util.*;

import org.deltava.beans.navdata.NavigationDataBean;

import org.deltava.util.GeoUtils;

/**
 * A Flight Plan Generator for Microsoft Flight Simulator 2004.
 * @author Luke
 * @version 3.1
 * @since 2.4
 */

public class FS9Generator extends FlightPlanGenerator {

	/**
	 * Generates an FS9 flight plan between two airports.
	 * @param waypoints a Collection of waypoints
	 * @return the generated flight plan file
	 */
	@Override
	public byte[] generate(Collection<NavigationDataBean> waypoints) {

		ByteArrayOutputStream out = new ByteArrayOutputStream();
		PrintWriter ctx = new CustomNewlineWriter(out, "\r\n");

		// Write header
		ctx.println("[flightplan]");
		ctx.println("AppVersion=9.0.30612");
		ctx.println("title=" + _aD.getICAO() + " to " + _aA.getICAO());
		ctx.println("description=" + _aD.getICAO() + ", " + _aA.getICAO());
		ctx.println("type=IFR");
		ctx.println("routetype=3");
		ctx.println("cruising_altitude=" + _altitude);
		ctx.println("departure_id=" + _aD.getICAO() + ", " + GeoUtils.formatFS9(_aD) + ", +000000.00,");
		ctx.println("departure_name=" + _aD.getName());
		ctx.println("departure_position=GATE ?");
		ctx.println("destination_id=" + _aA.getICAO() + ", " + GeoUtils.formatFS9(_aA) + ", +000000.00,");
		ctx.println("destination_name=" + _aA.getName());
		if (_sid != null)
			ctx.println("sid=" + _sid.getCode());
		if (_star != null)
			ctx.println("star=" + _star.getCode());

		// Write the route entries
		int waypointIdx = 0;
		for (Iterator<NavigationDataBean> i = waypoints.iterator(); i.hasNext();) {
			NavigationDataBean nd = i.next();
			ctx.print("waypoint." + String.valueOf(waypointIdx) + "=");
			
			// Display region only if we have one and it's not the first/last waypoint 
			if ((nd.getRegion() != null) && (waypointIdx > 0) && i.hasNext())
				ctx.print(nd.getRegion());
			
			ctx.print(", ");
			ctx.print(nd.getCode());
			ctx.print(", , ");
			ctx.print(nd.getCode());
			switch (nd.getType()) {
				case NavigationDataBean.AIRPORT:
				case NavigationDataBean.NDB:
				case NavigationDataBean.VOR:
					ctx.print(", ");
					ctx.print(nd.getTypeName().charAt(0));
					ctx.print(", ");
					break;

				default:
					ctx.print(", I, ");
			}

			ctx.print(GeoUtils.formatFS9(nd));
			ctx.println(", +000000.00,");
			waypointIdx++;
		}

		// Flush and return
		ctx.close();
		return out.toByteArray();
	}

	/**
	 * Returns the MIME type of flight plans generated by this Generator.
	 * @return text/plain
	 */
	public String getMimeType() {
		return "text/plain";
	}

	/**
	 * Returns the file extension of flight plans generated by this Generator.
	 * @return pln
	 */
	public String getExtension() {
		return "pln";
	}
}