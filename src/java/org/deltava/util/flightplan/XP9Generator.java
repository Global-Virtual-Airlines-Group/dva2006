// Copyright 2010 Global Virtual Airlines Group. All Rights Reserved.
package org.deltava.util.flightplan;

import java.io.*;
import java.util.*;

import org.deltava.beans.navdata.NavigationDataBean;
import org.deltava.util.StringUtils;

/**
 * A Flight Plan Generator for X-Plane 9.
 * @author Luke
 * @version 3.3
 * @since 2.8
 */

public class XP9Generator extends FlightPlanGenerator {

	/**
	 * Generates an X-Plane 9 flight plan between two airports.
	 * @param waypoints a Collection of waypoints
	 * @return the generated flight plan file
	 */
	@Override
	public byte[] generate(Collection<NavigationDataBean> waypoints) {
		
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		PrintWriter ctx = new CustomNewlineWriter(out, "\r\n");
		
		// Write header
		ctx.println('I');
		ctx.println("3 version");
		ctx.println('4');
		ctx.println('1');
		
		// Write navaids
		for (Iterator<NavigationDataBean> i = waypoints.iterator(); i.hasNext(); ) {
			NavigationDataBean nd = i.next();
			switch (nd.getType()) {
				case NavigationDataBean.NDB:
					ctx.print("2 ");
					break;
					
				case NavigationDataBean.AIRPORT:
					ctx.print("1 ");
					break;
					
				case NavigationDataBean.VOR:
					ctx.print("3 ");
					break;
					
				default:
					ctx.print("11 ");
			}
			
			ctx.print(nd.getCode());
			ctx.print(" 0.00000 ");
			ctx.print(StringUtils.format(nd.getLatitude(), "#0.00000"));
			ctx.print(' ');
			ctx.println(StringUtils.format(nd.getLongitude(), "##0.00000"));
		}
				
		// Flush and return
		ctx.close();
		return out.toByteArray();
	}

	/**
	 * Returns the MIME type of flight plans generated by this Generator.
	 * @return text/plain
	 */
	public String getMimeType() {
		return "text/plain";
	}
	
	/**
	 * Returns the file extension of flight plans generated by this Generator.
	 * @return pln
	 */
	public String getExtension() {
		return "fms";
	}
}