// Copyright 2010, 2012 Global Virtual Airlines Group. All Rights Reserved.
package org.deltava.util.flightplan;

import java.io.*;
import java.util.*;

import org.deltava.beans.navdata.*;

import org.deltava.util.StringUtils;

/**
 * A Flight Plan Generator for X-Plane 9.
 * @author Luke
 * @version 5.0
 * @since 2.8
 */

public class XP9Generator extends FlightPlanGenerator {

	/**
	 * Generates an X-Plane 9 flight plan between two airports.
	 * @param waypoints a Collection of waypoints
	 * @return the generated flight plan file
	 */
	@Override
	public String generate(Collection<NavigationDataBean> waypoints) {
		StringWriter out = new StringWriter();
		try (PrintWriter ctx = new CustomNewlineWriter(out)) {
			// Write header
			ctx.println('I');
			ctx.println("3 version");
			ctx.println('4');
			ctx.println('1');

			// Write navaids
			for (Iterator<NavigationDataBean> i = waypoints.iterator(); i.hasNext();) {
				NavigationDataBean nd = i.next();
				switch (nd.getType()) {
				case NDB:
					ctx.print("2 ");
					break;

				case AIRPORT:
					ctx.print("1 ");
					break;

				case VOR:
					ctx.print("3 ");
					break;

				default:
					ctx.print("11 ");
				}

				ctx.print(nd.getCode());
				ctx.print(" 0.00000 ");
				ctx.print(StringUtils.format(nd.getLatitude(), "#0.00000"));
				ctx.print(' ');
				ctx.println(StringUtils.format(nd.getLongitude(), "##0.00000"));
			}
		}

		return out.toString();
	}

	/**
	 * Returns the file extension of flight plans generated by this Generator.
	 * @return fms
	 */
	public String getExtension() {
		return "fms";
	}
}