// Copyright 2022 Global Virtual Airlines Group. All Rights Reserved.
package org.deltava.beans.simbrief;

import java.util.*;
import java.time.Instant;

import org.jdom2.Document;

import org.deltava.beans.DatabaseBean;
import org.deltava.beans.schedule.Airport;

/**
 * A bean to store a SimBrief briefing package.
 * @author Luke
 * @version 10.3
 * @since 10.3
 */

public class BriefingPackage extends DatabaseBean {

	private final PackageFormat _fmt;
	private String _sbID;
	private Instant _createdOn;
	
	private Airport _airportL;
	
	private int _airac;
	private String _url;
	private String _cruiseAlt;
	private String _route;
	
	private String _rwyD;
	private String _rwyA;
	
	private int _baseFuel;
	private int _taxiFuel;
	private int _enrouteFuel;
	private int _altFuel;
	
	private String _baseFPURL;
	private final Collection<FlightPlan> _plans = new TreeSet<FlightPlan>();
	
	private Document _xml;
	
	/**
	 * Creates the bean.
	 * @param id the Flight Report database ID
	 * @param fmt the PackageFormat
	 */
	BriefingPackage(int id, PackageFormat fmt) {
		super();
		setID(id);
		_fmt = fmt;
	}

	/**
	 * Returns the SimBrief ID for this package.
	 * @return the static ID
	 */
	public String getSimBriefID() {
		return _sbID;
	}
	
	/**
	 * Returns the briefing package format.
	 * @return the format
	 */
	public PackageFormat getFormat() {
		return _fmt;
	}

	/**
	 * Returns the generation date of this package.
	 * @return the date/time the package was generated by SimBrief
	 */
	public Instant getCreatedOn() {
		return _createdOn;
	}
	
	/**
	 * Returns the AIRAC version used for this route.
	 * @return the AIRAC version
	 */
	public int getAIRAC() {
		return _airac;
	}
	
	/**
	 * Returns the arrival alternate Airport.
	 * @return the alternate Airport
	 */
	public Airport getAirportL() {
		return _airportL;
	}
	
	/**
	 * Returns the cruise altitude.
	 * @return the altitude
	 */
	public String getCruiseAltitude() {
		return _cruiseAlt;
	}

	/**
	 * Returns the flight route.
	 * @return the flight route
	 */
	public String getRoute() {
		return _route;
	}
	
	/**
	 * Returns the departure Runway.
	 * @return the departure runway name
	 */
	public String getRunwayD() {
		return _rwyD;
	}
	
	/**
	 * Returns the arrival Runway.
	 * @return the arrival runway name
	 */
	public String getRunwayA() {
		return _rwyA;
	}
	
	/**
	 * Returns the URL used to download the SimBrief package.
	 * @return the SimBrief URL
	 */
	public String getURL() {
		return _url;
	}
	
	/**
	 * Returns the base URL for downloadable Flight Plans.
	 * @return the URL
	 */
	public String getBasePlanURL() {
		return _baseFPURL;
	}
	
	/**
	 * Returns the Flight Plans in this briefing package.
	 * @return a Collection of FlightPlans
	 */
	public Collection<FlightPlan> getFlightPlans() {
		return _plans;
	}
	
	/**
	 * Returns the raw XML generated by SimBrief.
	 * @return the XML Document
	 */
	public Document getXML() {
		return _xml;
	}
	
	/**
	 * Returns the base fuel load.
	 * @return fuel the fuel in pounds
	 */
	public int getBaseFuel() {
		return _baseFuel;
	}

	/**
	 * Returns the taxi fuel load.
	 * @return fuel the fuel in pounds
	 */
	public int getTaxiFuel() {
		return _taxiFuel;
	}
	
	/**
	 * Returns the enroute fuel load.
	 * @return fuel the fuel in pounds
	 */
	public int getEnrouteFuel() {
		return _enrouteFuel;
	}
	
	/**
	 * Returns the alternate fuel load.
	 * @return fuel the fuel in pounds
	 */
	public int getAlternateFuel() {
		return _altFuel;
	}
	
	/**
	 * Returns the total fuel load.
	 * @return the fuel in pounds
	 */
	public int getTotalFuel() {
		return _baseFuel + _taxiFuel + _enrouteFuel + _altFuel;
	}
	
	/**
	 * Adds a flight plan to the briefing package.
	 * @param fp a FlightPlan
	 */
	public void addPlan(FlightPlan fp) {
		_plans.add(fp);
	}
	
	/**
	 * Updates the generation date of this package.
	 * @param dt the date/time the package was generated by SimBrief
	 */
	public void setCreatedOn(Instant dt) {
		_createdOn = dt;
	}
	
	/**
	 * Updates the SimBrief plan ID.
	 * @param id the SimBrief ID
	 */
	public void setSimBriefID(String id) {
		_sbID = id;
	}
	
	/**
	 * Updates the AIRAC version used for this route.
	 * @param airac the AIRAC version
	 */
	public void setAIRAC(int airac) {
		_airac = airac;
	}
	
	/**
	 * Updates the destination alternate Airport.
	 * @param a the Airport
	 */
	public void setAirportL(Airport a) {
		_airportL = a;
	}
	
	/**
	 * Updates the cruise altitude.
	 * @param alt the altitude in feet
	 */
	public void setCruiseAltitude(String alt) {
		_cruiseAlt = alt;
	}
	
	/**
	 * Updates the flight route.
	 * @param rt the route
	 */
	public void setRoute(String rt) {
		_route = rt;
	}
	
	/**
	 * Updates the departure Runway.
	 * @param rwy the departure runway name
	 */
	public void setRunwayD(String rwy) {
		_rwyD = rwy;
	}
	
	/**
	 * Updates the arrival Runway.
	 * @param rwy the arrival runway name
	 */
	public void setRunwayA(String rwy) {
		_rwyA = rwy;
	}
	
	/**
	 * Updates the URL used to download the briefing package.
	 * @param url the SimBrief URL
	 */
	public void setURL(String url) {
		_url = url;
	}
	
	/**
	 * Updates the base Flight Plan URL.
	 * @param url the URL
	 */
	public void setBasePlanURL(String url) {
		_baseFPURL = url;
	}
	
	/**
	 * Updates the raw XML generated by SimBrief.
	 * @param doc the XML Document
	 */
	public void setXML(Document doc) {
		_xml = doc;
	}
	
	/**
	 * Updates the base fuel load.
	 * @param fuel the fuel in pounds
	 */
	public void setBaseFuel(int fuel) {
		_baseFuel = fuel;
	}
	
	/**
	 * Updates the taxi fuel load.
	 * @param fuel the fuel in pounds
	 */
	public void setTaxiFuel(int fuel) {
		_taxiFuel = fuel;
	}

	/**
	 * Updates the enroute fuel load.
	 * @param fuel the fuel in pounds
	 */
	public void setEnrouteFuel(int fuel) {
		_enrouteFuel = fuel;
	}
	
	/**
	 * Updates the alternate fuel load.
	 * @param fuel the fuel in pounds
	 */
	public void setAlternateFuel(int fuel) {
		_altFuel = fuel;
	}
}